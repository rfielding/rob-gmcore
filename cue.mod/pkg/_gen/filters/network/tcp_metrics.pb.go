// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.21.5
// source: source/filters/network/proto/tcp_metrics.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TcpMetricsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsPort                            int32  `protobuf:"varint,1,opt,name=metrics_port,json=metricsPort,proto3" json:"metrics_port,omitempty"`
	MetricsHost                            string `protobuf:"bytes,2,opt,name=metrics_host,json=metricsHost,proto3" json:"metrics_host,omitempty"`
	MetricsDashboardUriPath                string `protobuf:"bytes,3,opt,name=metrics_dashboard_uri_path,json=metricsDashboardUriPath,proto3" json:"metrics_dashboard_uri_path,omitempty"`
	MetricsPrometheusUriPath               string `protobuf:"bytes,4,opt,name=metrics_prometheus_uri_path,json=metricsPrometheusUriPath,proto3" json:"metrics_prometheus_uri_path,omitempty"`
	PrometheusSystemMetricsIntervalSeconds int32  `protobuf:"varint,5,opt,name=prometheus_system_metrics_interval_seconds,json=prometheusSystemMetricsIntervalSeconds,proto3" json:"prometheus_system_metrics_interval_seconds,omitempty"`
	MetricsRingBufferSize                  int32  `protobuf:"varint,6,opt,name=metrics_ring_buffer_size,json=metricsRingBufferSize,proto3" json:"metrics_ring_buffer_size,omitempty"`
	MetricsKeyFunction                     string `protobuf:"bytes,7,opt,name=metrics_key_function,json=metricsKeyFunction,proto3" json:"metrics_key_function,omitempty"`
	MetricsKeyDepth                        string `protobuf:"bytes,8,opt,name=metrics_key_depth,json=metricsKeyDepth,proto3" json:"metrics_key_depth,omitempty"`
	ThroughputTimeoutDuration              string `protobuf:"bytes,9,opt,name=throughput_timeout_duration,json=throughputTimeoutDuration,proto3" json:"throughput_timeout_duration,omitempty"`
	UseMetricsTls                          bool   `protobuf:"varint,10,opt,name=use_metrics_tls,json=useMetricsTls,proto3" json:"use_metrics_tls,omitempty"`
	ServerCaCertPath                       string `protobuf:"bytes,11,opt,name=server_ca_cert_path,json=serverCaCertPath,proto3" json:"server_ca_cert_path,omitempty"`
	ServerCertPath                         string `protobuf:"bytes,12,opt,name=server_cert_path,json=serverCertPath,proto3" json:"server_cert_path,omitempty"`
	ServerKeyPath                          string `protobuf:"bytes,13,opt,name=server_key_path,json=serverKeyPath,proto3" json:"server_key_path,omitempty"`
	EnableCloudwatch                       bool   `protobuf:"varint,14,opt,name=enable_cloudwatch,json=enableCloudwatch,proto3" json:"enable_cloudwatch,omitempty"`
	CwNamespace                            string `protobuf:"bytes,15,opt,name=cw_namespace,json=cwNamespace,proto3" json:"cw_namespace,omitempty"`
	CwDimensions                           string `protobuf:"bytes,16,opt,name=cw_dimensions,json=cwDimensions,proto3" json:"cw_dimensions,omitempty"`
	CwMetricsRoutes                        string `protobuf:"bytes,17,opt,name=cw_metrics_routes,json=cwMetricsRoutes,proto3" json:"cw_metrics_routes,omitempty"`
	CwMetricsValues                        string `protobuf:"bytes,18,opt,name=cw_metrics_values,json=cwMetricsValues,proto3" json:"cw_metrics_values,omitempty"`
	CwDebug                                bool   `protobuf:"varint,19,opt,name=cw_debug,json=cwDebug,proto3" json:"cw_debug,omitempty"`
	CwReportingIntervalSeconds             int32  `protobuf:"varint,20,opt,name=cw_reporting_interval_seconds,json=cwReportingIntervalSeconds,proto3" json:"cw_reporting_interval_seconds,omitempty"`
	AwsRegion                              string `protobuf:"bytes,21,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	AwsAccessKeyId                         string `protobuf:"bytes,22,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey                     string `protobuf:"bytes,23,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty"`
	AwsSessionToken                        string `protobuf:"bytes,24,opt,name=aws_session_token,json=awsSessionToken,proto3" json:"aws_session_token,omitempty"`
	AwsProfile                             string `protobuf:"bytes,25,opt,name=aws_profile,json=awsProfile,proto3" json:"aws_profile,omitempty"`
	AwsConfigFile                          string `protobuf:"bytes,26,opt,name=aws_config_file,json=awsConfigFile,proto3" json:"aws_config_file,omitempty"`
	DecodeToProtocol                       string `protobuf:"bytes,27,opt,name=decode_to_protocol,json=decodeToProtocol,proto3" json:"decode_to_protocol,omitempty"`
	InternalTopics                         bool   `protobuf:"varint,28,opt,name=internal_topics,json=internalTopics,proto3" json:"internal_topics,omitempty"`
}

func (x *TcpMetricsConfig) Reset() {
	*x = TcpMetricsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_filters_network_proto_tcp_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpMetricsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpMetricsConfig) ProtoMessage() {}

func (x *TcpMetricsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_source_filters_network_proto_tcp_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpMetricsConfig.ProtoReflect.Descriptor instead.
func (*TcpMetricsConfig) Descriptor() ([]byte, []int) {
	return file_source_filters_network_proto_tcp_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *TcpMetricsConfig) GetMetricsPort() int32 {
	if x != nil {
		return x.MetricsPort
	}
	return 0
}

func (x *TcpMetricsConfig) GetMetricsHost() string {
	if x != nil {
		return x.MetricsHost
	}
	return ""
}

func (x *TcpMetricsConfig) GetMetricsDashboardUriPath() string {
	if x != nil {
		return x.MetricsDashboardUriPath
	}
	return ""
}

func (x *TcpMetricsConfig) GetMetricsPrometheusUriPath() string {
	if x != nil {
		return x.MetricsPrometheusUriPath
	}
	return ""
}

func (x *TcpMetricsConfig) GetPrometheusSystemMetricsIntervalSeconds() int32 {
	if x != nil {
		return x.PrometheusSystemMetricsIntervalSeconds
	}
	return 0
}

func (x *TcpMetricsConfig) GetMetricsRingBufferSize() int32 {
	if x != nil {
		return x.MetricsRingBufferSize
	}
	return 0
}

func (x *TcpMetricsConfig) GetMetricsKeyFunction() string {
	if x != nil {
		return x.MetricsKeyFunction
	}
	return ""
}

func (x *TcpMetricsConfig) GetMetricsKeyDepth() string {
	if x != nil {
		return x.MetricsKeyDepth
	}
	return ""
}

func (x *TcpMetricsConfig) GetThroughputTimeoutDuration() string {
	if x != nil {
		return x.ThroughputTimeoutDuration
	}
	return ""
}

func (x *TcpMetricsConfig) GetUseMetricsTls() bool {
	if x != nil {
		return x.UseMetricsTls
	}
	return false
}

func (x *TcpMetricsConfig) GetServerCaCertPath() string {
	if x != nil {
		return x.ServerCaCertPath
	}
	return ""
}

func (x *TcpMetricsConfig) GetServerCertPath() string {
	if x != nil {
		return x.ServerCertPath
	}
	return ""
}

func (x *TcpMetricsConfig) GetServerKeyPath() string {
	if x != nil {
		return x.ServerKeyPath
	}
	return ""
}

func (x *TcpMetricsConfig) GetEnableCloudwatch() bool {
	if x != nil {
		return x.EnableCloudwatch
	}
	return false
}

func (x *TcpMetricsConfig) GetCwNamespace() string {
	if x != nil {
		return x.CwNamespace
	}
	return ""
}

func (x *TcpMetricsConfig) GetCwDimensions() string {
	if x != nil {
		return x.CwDimensions
	}
	return ""
}

func (x *TcpMetricsConfig) GetCwMetricsRoutes() string {
	if x != nil {
		return x.CwMetricsRoutes
	}
	return ""
}

func (x *TcpMetricsConfig) GetCwMetricsValues() string {
	if x != nil {
		return x.CwMetricsValues
	}
	return ""
}

func (x *TcpMetricsConfig) GetCwDebug() bool {
	if x != nil {
		return x.CwDebug
	}
	return false
}

func (x *TcpMetricsConfig) GetCwReportingIntervalSeconds() int32 {
	if x != nil {
		return x.CwReportingIntervalSeconds
	}
	return 0
}

func (x *TcpMetricsConfig) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

func (x *TcpMetricsConfig) GetAwsAccessKeyId() string {
	if x != nil {
		return x.AwsAccessKeyId
	}
	return ""
}

func (x *TcpMetricsConfig) GetAwsSecretAccessKey() string {
	if x != nil {
		return x.AwsSecretAccessKey
	}
	return ""
}

func (x *TcpMetricsConfig) GetAwsSessionToken() string {
	if x != nil {
		return x.AwsSessionToken
	}
	return ""
}

func (x *TcpMetricsConfig) GetAwsProfile() string {
	if x != nil {
		return x.AwsProfile
	}
	return ""
}

func (x *TcpMetricsConfig) GetAwsConfigFile() string {
	if x != nil {
		return x.AwsConfigFile
	}
	return ""
}

func (x *TcpMetricsConfig) GetDecodeToProtocol() string {
	if x != nil {
		return x.DecodeToProtocol
	}
	return ""
}

func (x *TcpMetricsConfig) GetInternalTopics() bool {
	if x != nil {
		return x.InternalTopics
	}
	return false
}

var File_source_filters_network_proto_tcp_metrics_proto protoreflect.FileDescriptor

var file_source_filters_network_proto_tcp_metrics_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x63, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2d, 0x67, 0x72, 0x65, 0x79, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6f, 0x2e,
	0x67, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22,
	0xa4, 0x0a, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x75, 0x72, 0x69, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x55, 0x72, 0x69, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x75, 0x72,
	0x69, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x55,
	0x72, 0x69, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x69, 0x6e,
	0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x4b, 0x65, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x6c,
	0x73, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x77, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x77, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x77, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x77, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x77, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x77,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1a, 0x63, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11,
	0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77,
	0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x77, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x77, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x79, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x2d,
	0x69, 0x6f, 0x2f, 0x67, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_source_filters_network_proto_tcp_metrics_proto_rawDescOnce sync.Once
	file_source_filters_network_proto_tcp_metrics_proto_rawDescData = file_source_filters_network_proto_tcp_metrics_proto_rawDesc
)

func file_source_filters_network_proto_tcp_metrics_proto_rawDescGZIP() []byte {
	file_source_filters_network_proto_tcp_metrics_proto_rawDescOnce.Do(func() {
		file_source_filters_network_proto_tcp_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_source_filters_network_proto_tcp_metrics_proto_rawDescData)
	})
	return file_source_filters_network_proto_tcp_metrics_proto_rawDescData
}

var file_source_filters_network_proto_tcp_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_source_filters_network_proto_tcp_metrics_proto_goTypes = []interface{}{
	(*TcpMetricsConfig)(nil), // 0: greymatter_io.gm_proxy.source.filters.network.tcpMetricsConfig
}
var file_source_filters_network_proto_tcp_metrics_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_source_filters_network_proto_tcp_metrics_proto_init() }
func file_source_filters_network_proto_tcp_metrics_proto_init() {
	if File_source_filters_network_proto_tcp_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_source_filters_network_proto_tcp_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpMetricsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_source_filters_network_proto_tcp_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_source_filters_network_proto_tcp_metrics_proto_goTypes,
		DependencyIndexes: file_source_filters_network_proto_tcp_metrics_proto_depIdxs,
		MessageInfos:      file_source_filters_network_proto_tcp_metrics_proto_msgTypes,
	}.Build()
	File_source_filters_network_proto_tcp_metrics_proto = out.File
	file_source_filters_network_proto_tcp_metrics_proto_rawDesc = nil
	file_source_filters_network_proto_tcp_metrics_proto_goTypes = nil
	file_source_filters_network_proto_tcp_metrics_proto_depIdxs = nil
}
